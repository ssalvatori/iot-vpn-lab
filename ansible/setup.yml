---
- name: setup raspberry pi
  hosts: all
  gather_facts: False
  become: yes

  handlers:
    - name: dnsmasq
      listen: "restart dnsmasq"
      systemd:
        name: dnsmasq
        state: restarted
        enabled: yes

    - name: hostapd
      listen: "restart hostapd"
      systemd:
        name: hostapd
        state: restarted
        enabled: yes
        masked: no

    - name: netfilter-netfilter save
      listen: "save iptables"
      command: netfilter-persistent save

    - name: reload systemctl
      listen: "iot vpn lab"
      systemd:
        name: iot_vpn_lab
        state: restarted
        enabled: yes
      tags:
        - iot_vpn_lab

  pre_tasks:

    - name: check ssid username
      fail: msg="SSID_NAME is not defined"
      when: (ssid.name is not defined) or (ssid.name|length == 0)

    - name: check ssid passpharse
      fail: msg="SSID_PASSPHARSE is not defined"
      when: (ssid.passpharse is not defined) or (ssid.passpharse|length == 0)

    - name: check ssid country code
      fail: msg="SSID_COUNTRY_CODE is not defined"
      when: (ssid.country_code is not defined) or (ssid.country_code|length == 0)

    - name: check nordvpn username
      fail: msg="NORDVPN_USERNAME is not defined"
      when: (openvpn_credentials.user is not defined) or (openvpn_credentials.user|length == 0)

    - name: check nordvpn password
      fail: msg="NORDVPN_PASSWORD is not defined"
      when: (openvpn_credentials.password is not defined) or (openvpn_credentials.password|length == 0)     

    - name: check aws ats endpoint password
      fail: msg="AWS_ATS_ENDPOINT is not defined"
      when: (aws_ats.endpoint is not defined) or (aws_ats.endpoint|length == 0)  

    - name: check aws thing name password
      fail: msg="AWS_THING_NAME is not defined"
      when: (aws_ats.name is not defined) or (aws_ats.name|length == 0)        

  tasks:
    - name: Install packages
      apt:
        pkg: "{{ packages }}"
        state: present

    - name: "Create {{ iot_vpn_lab }}"
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ iot_vpn_lab }}"
        - "{{ iot_vpn_lab }}/venv"
        - "{{ iot_vpn_lab }}/src"
        - "{{ iot_vpn_lab }}/nordvpn"
        - "{{ iot_vpn_lab }}/aws"
      notify: iot_vpn_lab

    - name: Copy nordvpn-conf-manager
      template:
        src: templates/nordvpn_conf.sh.j2
        dest: "{{ iot_vpn_lab }}/nordvpn_conf.sh"
        mode: 0755

    - name: Creating NORDVPN credentials file
      template:
        src: templates/nordvpn_credentials.j2
        dest: "{{ openvpn_credentials.path }}"
        mode: 0644

    - name: Setup nordvpn-conf-manager
      cron:
        name: "check dirs"
        minute: "0"
        hour: "0"
        job: "/bin/bash {{ iot_vpn_lab }}/nordvpn_conf.sh > {{ iot_vpn_lab }}/nordvpn_conf.log"

    - name: setup /etc/dhcpcd.conf
      template:
        src: templates/dhcpcd.conf.j2
        dest: /etc/dhcpcd.conf

    - name: setup wlan0 interfaces
      template:
        src: templates/wlan0_interfaces.j2
        dest: /etc/network/interfaces.d/wlan0

    - name: setup /etc/dnsmasq.conf
      template:
        src: templates/dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
      notify:
        - restart dnsmasq

    - name: setup /etc/hostapd/hostapd.conf
      template:
        src: templates/hostapd.conf.j2
        dest: /etc/hostapd/hostapd.conf
      notify:
        - restart hostapd

    - name: setup /etc/default/hostapd
      lineinfile:
        dest: /etc/default/hostapd
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: "^#DAEMON_CONF=\"\"$", line: "DAEMON_CONF=\"/etc/hostapd/hostapd.conf\"" }
      notify:
        - restart hostapd

    - name: Enable routing and masquerading
      template:
        src: templates/routed-ap.conf.j2
        dest: /etc/sysctl.d/routed-ap.conf
        owner: root
        group: root

    - name: Create Iptables NAT eth0
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: eth0
        jump: MASQUERADE
        comment: Ansible NAT
      notify: save iptables

    - name: Create Iptables NAT tun0
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: tun0
        jump: MASQUERADE
        comment: Ansible NAT
      notify: save iptables

    - name: Setup systemd iot_vpn_lab
      template:
        src: templates/iot_vpn_lab.service.j2
        dest: /etc/systemd/system/iot_vpn_lab.service
        mode: 0644
      notify:
        - iot vpn lab
      tags:
        - iot_vpn_lab

    - name: Copy aws certs
      synchronize:
        src: files/aws/
        dest: "{{ iot_vpn_lab }}/aws/"
      notify:
        - iot vpn lab
      tags:
        - iot_vpn_lab

    - name: Copy iot_vpn_lab python script
      unarchive:
        src: files/iot_vpn_lab.zip
        dest: "{{ iot_vpn_lab }}/src/"
        remote_src: no
      notify:
        - iot vpn lab
      tags:
        - iot_vpn_lab

    - name: Creating configuration for iot_vpn_lab service
      template:
        src: templates/default_env.j2
        dest: /etc/default/iot_vpn_lab
      notify:
        - iot vpn lab
      tags:
        - iot_vpn_lab

    - name: Install requirements for iot_vpn_lab
      pip:
        requirements: "{{ iot_vpn_lab }}/src/requirements.txt"
        virtualenv: "{{ iot_vpn_lab }}/venv"
        virtualenv_python: python3
      notify:
        - iot vpn lab
      tags:
        - iot_vpn_lab